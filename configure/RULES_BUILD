# $Id: RULES_BUILD,v 1.13 2004-04-05 18:29:03 jba Exp $
#
#	State notation language (snc) rules
# Each <name>.st (or <name>.stt) produces <name>.c


#--------------------------------------------------
# snc flags

TARGET_SNCFLAGS = $($(basename $@)_SNCFLAGS) $($(basename $@)_SNCFLAGS_$(OS_CLASS))

#  addons -  concat os specific sequencer flags
ifneq ($(strip $(SNCFLAGS_$(OS_CLASS))),)
SNCFLAGS += $(subst -nil-,,$(SNCFLAGS_$(OS_CLASS)))
else
ifdef SNCFLAGS_DEFAULT
SNCFLAGS += $(SNCFLAGS_DEFAULT)
endif
endif

#--------------------------------------------------
# vpath

vpath %.st $(USR_VPATH) $(ALL_SRC_DIRS)
vpath %.stt $(USR_VPATH) $(ALL_SRC_DIRS)

#--------------------------------------------------
# depends rule needs .c files

SNC_SRC_FILES = $(basename $(notdir $(filter %.st %.stt,$(SRC_FILES))))
SNC_CSRC_FILES =  $(addsuffix .c,$(SNC_SRC_FILES))
HDEPENDS_FILES_YES += $(addsuffix $(DEP),$(basename $(SNC_CSRC_FILES)))

#--------------------------------------------------
# snc executable

ifndef SNC
SNC = $(SNCSEQ_HOST_BIN)/snc$(HOSTEXE)
endif

#--------------------------------------------------
# Rules

%.i: ../%.st
	@echo "preprocessing $<"
	@$(RM) $@
	$(PREPROCESS.cpp)

%.c: %.i
	@echo "converting $<"
	$(SNC) $(TARGET_SNCFLAGS) $(SNCFLAGS) $< -o $(@F).tmp
	$(MV) $(@F).tmp $@

%.c: ../%.stt
	@echo "converting $< "
	$(SNC) $(TARGET_SNCFLAGS) $(SNCFLAGS) $< -o $(@F).tmp
	$(MV) $(@F).tmp $@

clean::
	@$(RM) $(SNC_CSRC_FILES)

