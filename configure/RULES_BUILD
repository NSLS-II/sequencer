# $Id: RULES_BUILD,v 1.7 2001-03-20 23:08:54 jba Exp $
#
#	State notation language (snc) rules

TARGET_SNCFLAGS = $($(subst _sncreg,,$(basename $@))_SNCFLAGS) $($(subst _sncreg,,$(basename $@))_SNCFLAGS_$(OS_CLASS))
CPPSNCFLAGS += $(CROSS_CPPFLAGS) $(POSIX_CPPFLAGS) $(EPICS_BASE_CPPFLAGS)\
 $(TARGET_CPPFLAGS) $(USR_CPPFLAGS) $(ARCH_DEP_CPPFLAGS)\
 $(OP_SYS_CPPFLAGS) $(CODE_CPPFLAGS)

#--------------------------------------------------
# snc (state notation language) flags

#  addons -  concat os specific sequencer flags
ifneq ($(strip $(SNCFLAGS_$(OS_CLASS))),)
SNCFLAGS += $(subst -nil-,,$(SNCFLAGS_$(OS_CLASS)))
else
ifdef SNCFLAGS_DEFAULT
SNCFLAGS += $(SNCFLAGS_DEFAULT)
endif
endif

vpath %.st $(USR_VPATH) $(ALL_SRC_DIRS)
vpath %.stt $(USR_VPATH) $(ALL_SRC_DIRS)

# depends rule uses .c and .cpp files
STT_SRC_FILES = $(notdir $(filter %.stt,$(SRC_FILES)))
ST_SRC_FILES = $(notdir $(filter %.st,$(SRC_FILES)))
DEPENDS_SRC_FILES = $(filter-out %.st %.stt,$(SRC_FILES)) \
                    $(STT_SRC_FILES:.stt=_snc.c) $(ST_SRC_FILES:.st=_snc.c) \
                    $(STT_SRC_FILES:.stt=_sncreg.cpp) $(ST_SRC_FILES:.st=_sncreg.cpp)

ifndef SNCSEQ
SNCSEQ=$(TOP)
SNCSEQ_LIB      = $(SNCSEQ)/lib/$(T_A)
SNCSEQ_BIN      = $(SNCSEQ)/bin/$(T_A)
endif

seq_DIR=$(SNCSEQ_LIB)
pv_DIR=$(SNCSEQ_LIB)

ifndef SNC
SNC = $(SNCSEQ)/bin/$(EPICS_HOST_ARCH)/snc$(HOSTEXE)
endif

%.i: ../%.st
	@echo "preprocessing $<"
	@$(RM) $@
	$(CPP) $(CPPSNCFLAGS) $(INCLUDES) $< > $@

%_sncreg.cpp: %.i
	@echo "converting $<"
	@$(RM) $@
	$(SNC) $(TARGET_SNCFLAGS) $(SNCFLAGS) $< -o $@

%_sncreg.cpp: ../%.stt
	@echo "converting $< "
	@$(RM) $@
	$(SNC) $(TARGET_SNCFLAGS) $(SNCFLAGS) $< -o $@

%_snc.c: %_sncreg.cpp
	@$(RM) $@
	@$(CP) $< $@

%$(OBJ): %_snc$(OBJ) %_sncreg$(OBJ)
	$(RM) $@
ifdef WIN32
	$(CP) $*_snc$(OBJ) $@
	type $*_sncreg$(OBJ) >> $@
else 
	$(LDCMD)
endif

clean::
	@$(RM) %.i %_sncreg.cpp %_snc.c

.PRECIOUS: %.i %_sncreg.cpp %_snc.c
 
