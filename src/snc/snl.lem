%include {
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include "parse.h"
#include "snc_main.h"
}

%name parser

%parse_failure {
	parse_error("giving up");
	exit(1);
}

%syntax_error {
	parse_error("syntax error");
	exit(1);
}

%token_type { char* }
%default_type { Expr* }

/* Standard C operator table
  Primary Expression Operators  () [] . -> expr++ expr--  left-to-right
  Unary Operators  * & + - ! ~ ++expr --expr (typecast) sizeof()  right-to-left
  Binary Operators  * / %  left-to-right
  + -
  >> <<
  < > <= >=
  == !=
  &
  ^
  |
  &&
  ||
  Ternary Operator  ?:  right-to-left
  Assignment Operators  = += -= *= /= %= >>= <<= &= ^= |=  right-to-left
  Comma  ,  left-to-right
*/

// PRE and POST are pseudo tokens, they only for the
// precedence declaration.

// We do not support the comma operator, except
// in for(;;), where it is built-in.
// %left	COMMA.

%right	EQUAL ADDEQ SUBEQ ANDEQ OREQ
	DIVEQ MULEQ MODEQ LSHEQ RSHEQ XOREQ.
%right	QUESTION COLON.
%left	OROR.
%left	ANDAND.
%left	VBAR.
%left	CARET.
%left	AMPERSAND.
%left	EQ NE.
%left	GT GE LE LT.
%left	LSHIFT RSHIFT.
%left	ADD SUB.
%left	ASTERISK SLASH MOD.
%right	NOT INCR DECR PRE.
%left	LBRACKET RBRACKET POINTER PERIOD POST.
// LPAREN RPAREN not listed as we do not support indirect calls. */

program ::=
	program_name(pn)
	program_param(pp)
	definitions(ds)
	global_entry_code(en)
	state_sets(ss)
	global_exit_code(ex)
	c_codes(cc).
{
	program(pn,pp,ds,en,ss,ex,cc);
}

%type program_name {char*}
program_name(p) ::= PROGRAM NAME(n).	{ p = n; }

%type program_param {char*}
program_param(p) ::=
	LPAREN STRCON(x) RPAREN.	{ p = x; }
program_param(p) ::= .			{ p = 0; }

definitions(p) ::= definitions(xs) definition(x). {
	p = link_expr(xs, x);
}
definitions(p) ::= definition(x).	{ p = x; }

definition(p) ::= assign(x).		{ p = x; }
definition(p) ::= monitor(x).		{ p = x; }
definition(p) ::= sync(x).		{ p = x; }
definition(p) ::= syncq(x).		{ p = x; }
definition(p) ::= decl(x).		{ p = x; }
definition(p) ::= option.		{ p = 0; }
definition(p) ::= c_code(x).		{ p = x; }

assign(p) ::= ASSIGN NAME(v) to string(t) SEMICOLON. {
	p = expr(E_ASSIGN, v, 0, t);
}
assign(p) ::= ASSIGN NAME(v) subscript(s) to string(t) SEMICOLON. {
	p = expr(E_ASSIGN, v, expr(E_CONST, s, 0, 0), t);
}
assign(p) ::= ASSIGN NAME(v) to LBRACE strings(ss) RBRACE SEMICOLON. {
	p = expr(E_ASSIGN, v, 0, ss);
}

strings(p) ::= strings(xs) COMMA string(x). {
	p = link_expr(xs, x);
}
strings(p) ::= string(x). {
	p = x;
}

monitor(p) ::= MONITOR NAME(v) opt_subscript(s) SEMICOLON. {
	p = expr(E_MONITOR, v, s, 0);
}

sync(p) ::= SYNC NAME(v) opt_subscript(s) to NAME(ev) SEMICOLON. {
	p = expr(E_SYNC, v, s, expr(E_X, ev, 0, 0));
}

syncq(p) ::= SYNCQ NAME(v) opt_subscript(s) to NAME(ev) syncq_size(n) SEMICOLON. {
	p = expr(E_SYNCQ, v, s, expr(E_X, ev, n, 0));
}

syncq_size(p) ::= INTCON(n).		{ p = expr(E_CONST, n, 0, 0); }
syncq_size(p) ::= .			{ p = 0; }

to ::= TO.
to ::= .

opt_subscript(p) ::= subscript(s).	{ p = expr(E_CONST, s, 0, 0); }
opt_subscript(p) ::= .			{ p = 0; }

%type subscript {char*}
subscript(p) ::= LBRACKET INTCON(n) RBRACKET. { p = n; }

decl(p) ::= type(t) NAME(v) SEMICOLON.
		{ p = decl(t, VC_SIMPLE,  v, NULL, NULL, NULL); }
decl(p) ::= type(t) NAME(v) EQUAL number(n) SEMICOLON.
		{ p = decl(t, VC_SIMPLE,  v, NULL, NULL, n); }
decl(p) ::= type(t) NAME(v) subscript(s) SEMICOLON.
		{ p = decl(t, VC_ARRAY1,  v, s,    NULL, NULL); }
decl(p) ::= type(t) NAME(v) subscript(s1) subscript(s2) SEMICOLON.
		{ p = decl(t, VC_ARRAY2,  v, s1,   s2,   NULL); }
decl(p) ::= type(t) ASTERISK NAME(v) SEMICOLON.
		{ p = decl(t, VC_POINTER, v, NULL, NULL, NULL); }
decl(p) ::= type(t) ASTERISK NAME(v) subscript(s) SEMICOLON.
		{ p = decl(t, VC_ARRAYP,  v, s,    NULL, NULL); }

%type number {char*}
number(p) ::= INTCON(x).			{ p = x; }
number(p) ::= FPCON(x).				{ p = x; }

%type type {int}
type(p) ::= CHAR.				{ p = V_CHAR;	}
type(p) ::= SHORT.				{ p = V_SHORT;	}
type(p) ::= INT.				{ p = V_INT;	}
type(p) ::= LONG.				{ p = V_LONG;	}
type(p) ::= UNSIGNED CHAR.			{ p = V_UCHAR;	}
type(p) ::= UNSIGNED SHORT.			{ p = V_USHORT;	}
type(p) ::= UNSIGNED INT.			{ p = V_UINT;	}
type(p) ::= UNSIGNED LONG.			{ p = V_ULONG;	}
type(p) ::= FLOAT.				{ p = V_FLOAT;	}
type(p) ::= DOUBLE.				{ p = V_DOUBLE;	}
type(p) ::= STRING.				{ p = V_STRING;	}
type(p) ::= EVFLAG.				{ p = V_EVFLAG;	}

option ::= OPTION ADD NAME(n) SEMICOLON.	{ option_stmt(n, 1); }
option ::= OPTION SUB NAME(n) SEMICOLON.	{ option_stmt(n, 0); }

// State sets and states

global_entry_code(p) ::= ENTRY block(xs).	{ p = xs; }
global_entry_code(p) ::= .			{ p = 0; }

global_exit_code(p) ::= EXIT block(xs).		{ p = xs; }
global_exit_code(p) ::= .			{ p = 0; }

state_sets(p) ::= state_sets(xs) state_set(x).	{ p = link_expr(xs, x); }
state_sets(p) ::= state_set(x).			{ p = x; }

state_set(p) ::= SS NAME(n) LBRACE states(xs) RBRACE. {
	p = expr(E_SS, n, xs, 0);
}

states(p) ::= states(xs) state(x).		{ p = link_expr(xs, x); }
states(p) ::= state(x).				{ p = x; }

state(p) ::= STATE NAME(n) LBRACE state_options(os) state_blocks(xs) RBRACE.
						{ p = expr(E_STATE, n, xs, os); }

state_options(p) ::= state_options(xs) state_option(x).
						{ p = link_expr(xs, x); }
state_options(p) ::= .				{ p = 0; }

state_option(p) ::= OPTION state_option_value(v) NAME(n) SEMICOLON.
						{ p = expr(E_OPTION, n, v, 0); }

state_option_value(p) ::= ADD.			{ p = expr(E_X, "+", 0, 0); }
state_option_value(p) ::= SUB.			{ p = expr(E_X, "-", 0, 0); }

state_blocks(p) ::= entries(xs) transitions(ts) exits(ys).
						{ p = link_expr(link_expr(xs, ts), ys); }

entries(p) ::= entries(xs) entry(x).		{ p = link_expr(xs, x); }
entries(p) ::= .				{ p = 0; }

entry(p) ::= ENTRY block(xs).			{  p = expr(E_ENTRY, "", 0, xs); }

exits(p) ::= exits(xs) exit(x).			{ p = link_expr(xs, x); }
exits(p) ::= .					{ p = 0; }

exit(p) ::= EXIT block(xs).			{  p = expr(E_EXIT, "", 0, xs); }

transitions(p) ::= transitions(xs) transition(x). { p = link_expr(xs, x); }
transitions(p) ::= transition(x).		{ p = x; }

transition(p) ::= WHEN LPAREN opt_expr(c) RPAREN block(xs) STATE NAME(n).
						{ p = expr(E_WHEN, n, c, xs); }

block(p) ::= LBRACE statements(xs) RBRACE.	{ p = xs; }

// Statements

statements(p) ::= statements(xs) statement(x).	{ p = link_expr(xs, x); }
statements(p) ::= .				{ p = 0; }

statement(p) ::= BREAK SEMICOLON.		{ p = expr(E_BREAK, "", 0, 0); }
statement(p) ::= c_code(x).			{ p = x; }
statement(p) ::= block(xs).			{ p = expr(E_CMPND, "",xs, 0); }
statement(p) ::= IF LPAREN expr(c) RPAREN statement(x).
						{ p = expr(E_IF, "", c, x); }
statement(p) ::= ELSE statement(x).		{ p = expr(E_ELSE, "", x, 0); }
statement(p) ::= WHILE LPAREN expr(c) RPAREN statement(x).
						{ p = expr(E_WHILE, "", c, x); }
statement(p) ::= for_statement(x).		{ p = x; }
statement(p) ::= opt_expr(x) SEMICOLON.		{ p = expr(E_STMT, "", x, 0); }

for_statement(p) ::=
	FOR LPAREN
		exprs(init) SEMICOLON opt_expr(cond) SEMICOLON exprs(iter)
	RPAREN statement(x).			{ p = expr(E_FOR, "",
							expr(E_X, "", init, cond),
							expr(E_X, "", iter, x));
						}

// Expressions

// Atomic
expr(p) ::= number(x).				{ p = expr(E_CONST, x, 0, 0); }
expr(p) ::= string(x).				{ p = x; }
expr(p) ::= NAME(v).				{ p = expr(E_VAR, v, 0, 0); }

// Parenthesized
expr(p) ::= LPAREN expr(x) RPAREN.		{ p = expr(E_PAREN, "", x, 0); }

// Primary Expression and Unary Postfix Operators
expr(p) ::= NAME(f) LPAREN exprs(xs) RPAREN. [POST]
						{ p = expr(E_FUNC,  f, xs, 0); }
expr(p) ::= EXIT LPAREN exprs(xs) RPAREN. [POST]{ p = expr(E_FUNC, "exit", xs, 0); }
expr(p) ::= expr(x) LBRACKET expr(y) RBRACKET. [POST]
						{ p = expr(E_SUBSCR, "",   x, y); }
expr(p) ::= expr(x) PERIOD  expr(y).	[POST]	{ p = expr(E_BINOP,  "." , x, y); }
expr(p) ::= expr(x) POINTER expr(y).	[POST]	{ p = expr(E_BINOP,  "->", x, y); }
expr(p) ::= expr(x) INCR.		[POST]	{ p = expr(E_POST,   "++", x, 0); }
expr(p) ::= expr(x) DECR.		[POST]	{ p = expr(E_POST,   "--", x, 0); }

// Unary Prefix Operators
expr(p) ::= ADD	expr(x). [PRE]			{ p = expr(E_PRE, "+",  x, 0); }
expr(p) ::= SUB	expr(x). [PRE]			{ p = expr(E_PRE, "-",  x, 0); }
expr(p) ::= ASTERISK	expr(x). [PRE]		{ p = expr(E_PRE, "*",  x, 0); }
expr(p) ::= AMPERSAND	expr(x). [PRE]		{ p = expr(E_PRE, "&",  x, 0); }
expr(p) ::= NOT		expr(x). [PRE]		{ p = expr(E_PRE, "!",  x, 0); }
expr(p) ::= TILDE	expr(x). [PRE]		{ p = expr(E_PRE, "~",  x, 0); }
expr(p) ::= INCR	expr(x). [PRE]		{ p = expr(E_PRE, "++", x, 0); }
expr(p) ::= DECR	expr(x). [PRE]		{ p = expr(E_PRE, "--", x, 0); }

// Binary Operators, left-to-right
expr(p) ::= expr(x) SUB	expr(y).		{ p = expr(E_BINOP, "-",  x, y); }
expr(p) ::= expr(x) ADD		expr(y).	{ p = expr(E_BINOP, "+",  x, y); }
expr(p) ::= expr(x) ASTERISK	expr(y).	{ p = expr(E_BINOP, "*",  x, y); }
expr(p) ::= expr(x) SLASH	expr(y).	{ p = expr(E_BINOP, "/",  x, y); }
expr(p) ::= expr(x) GT		expr(y).	{ p = expr(E_BINOP, ">",  x, y); }
expr(p) ::= expr(x) GE		expr(y).	{ p = expr(E_BINOP, ">=", x, y); }
expr(p) ::= expr(x) EQ		expr(y).	{ p = expr(E_BINOP, "==", x, y); }
expr(p) ::= expr(x) NE		expr(y).	{ p = expr(E_BINOP, "!=", x, y); }
expr(p) ::= expr(x) LE		expr(y).	{ p = expr(E_BINOP, "<=", x, y); }
expr(p) ::= expr(x) LT		expr(y).	{ p = expr(E_BINOP, "<" , x, y); }
expr(p) ::= expr(x) OROR	expr(y).	{ p = expr(E_BINOP, "||", x, y); }
expr(p) ::= expr(x) ANDAND	expr(y).	{ p = expr(E_BINOP, "&&", x, y); }
expr(p) ::= expr(x) LSHIFT	expr(y).	{ p = expr(E_BINOP, "<<", x, y); }
expr(p) ::= expr(x) RSHIFT	expr(y).	{ p = expr(E_BINOP, ">>", x, y); }
expr(p) ::= expr(x) VBAR	expr(y).	{ p = expr(E_BINOP, "|",  x, y); }
expr(p) ::= expr(x) CARET	expr(y).	{ p = expr(E_BINOP, "^",  x, y); }
expr(p) ::= expr(x) AMPERSAND	expr(y).	{ p = expr(E_BINOP, "&",  x, y); }
expr(p) ::= expr(x) MOD		expr(y).	{ p = expr(E_BINOP, "%",  x, y); }

// Ternary Operator, right-to-left
expr(p) ::= expr(x) QUESTION expr(y) COLON expr(z). {
	p = expr(E_TERNOP, "?", x, expr(E_X, ":", y, z));
}

// Assignment Operators, right-to-left
expr(p) ::= expr(x) EQUAL	expr(y).	{ p = expr(E_BINOP, "="  , x, y); }
expr(p) ::= expr(x) ADDEQ	expr(y).	{ p = expr(E_BINOP, "+=" , x, y); }
expr(p) ::= expr(x) SUBEQ	expr(y).	{ p = expr(E_BINOP, "-=" , x, y); }
expr(p) ::= expr(x) ANDEQ	expr(y).	{ p = expr(E_BINOP, "&=" , x, y); }
expr(p) ::= expr(x) OREQ	expr(y).	{ p = expr(E_BINOP, "|=" , x, y); }
expr(p) ::= expr(x) DIVEQ	expr(y).	{ p = expr(E_BINOP, "/=" , x, y); }
expr(p) ::= expr(x) MULEQ	expr(y).	{ p = expr(E_BINOP, "*=" , x, y); }
expr(p) ::= expr(x) MODEQ 	expr(y).	{ p = expr(E_BINOP, "%=" , x, y); }
expr(p) ::= expr(x) LSHEQ	expr(y).	{ p = expr(E_BINOP, "<<=", x, y); }
expr(p) ::= expr(x) RSHEQ	expr(y).	{ p = expr(E_BINOP, ">>=", x, y); }
expr(p) ::= expr(x) XOREQ	expr(y).	{ p = expr(E_BINOP, "^=" , x, y); }

// Comma, left-to-right, not supported
// expr(p) ::= expr(x) COMMA	expr(y).	{ p = expr(E_BINOP, "," ,  x, y); }

opt_expr(p) ::= expr(x).			{ p = x; }
opt_expr(p) ::= .				{ p = 0; }

exprs(p) ::= exprs(xs) COMMA expr(x).		{ p = link_expr(xs, x); }
exprs(p) ::= expr(x).				{ p = x; }
exprs(p) ::= .					{ p = 0; }

string(p) ::= STRCON(x).			{ p = expr(E_STRING, x, 0, 0); }

// Literal (C) code

c_codes(p) ::= c_codes(xs) c_code(x).		{ p = link_expr(xs, x); }
c_codes(p) ::= .				{ p = 0; }

c_code(p) ::= CCODE(x). 			{ p = expr(E_TEXT, x, 0, 0); }
