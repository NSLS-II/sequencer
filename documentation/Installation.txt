Installation
============

Prerequisites
-------------

You need to have an EPICS base (`3.14.x
<http://www.aps.anl.gov/epics/base/R3-14/>`_) and its dependencies
(`GNU Make  <http://www.gnu.org/software/make/>`_, `Perl
<http://www.perl.org/>`_) installed, see http://www.aps.anl.gov/epics/.

From 2.0.98 onwards, building requires an additional tool named re2c to
be installed. Re2c can be downloaded from
http://sourceforge.net/projects/re2c/files/ (sources and Windows
binaries), the home page is http://re2c.org/. If you are on a linux
system, you will probably want to use the re2c package your
distribution provides.

Download
--------

Releases can be downloaded from
http://www-csr.bessy.de/control/SoftDist/sequencer/releases/. The most
current release is `2.0.98
<http://www-csr.bessy.de/control/SoftDist/sequencer/releases/seq-2.0.98.tar.gz>`_,
which is an alpha of the upcoming 2.1.

You can look at (or even use at your own risk ;-) the latest
development version by checking out the `darcs`_ repository::

   darcs get http://www-csr.bessy.de/control/SoftDist/sequencer/repo/

See `Contribute`_ for a short description how to record and send
patches.

Unpack
------

Change to the directory that you wish to be the parent of the sequencer
source tree. Then unpack and untar the file. For example::

  gunzip seq-x.y.z.tar.gz
  tar xf seq-x.y.z.tar

or simply::

  tar zxf seq-x.y.z.tar.gz

if you have GNU tar. You should now

::

   cd seq-x.y.z

In what follows, ``$SEQ`` refers to this directory.

Configure and Build
-------------------

The sequencer uses the EPICS build system. This means there is no
automatic configuration, instead you have to edit the file
*configure/RELEASE* and perhaps also *configure/CONFIG_SITE*. These are
make include files, so the syntax is that of (GNU) make.

In *configure/RELEASE*, change the definition of the variable
``EPICS_BASE`` to the path where your EPICS base is installed.

In *configure/CONFIG_SITE*, you can specify the target architectures
for which to build via the ``CROSS_COMPILER_TARGET_ARCHS`` variable (a
subset of those for which EPICS has been built, default is all), and
the message systems to support via the ``PVXXX`` variables (the default
is to use only CA). You can also configure where the re2c tool is
installed (the default configuration assumes that it can be found in
your ``PATH``).

Note: setting ``INSTALL_LOCATION_APP`` currently does not work.

.. todo: fix build with INSTALL_LOCATION set

Your environment should be configured for building EPICS applications.
This means that ``EPICS_HOST_ARCH`` and (possibly) ``LD_LIBRARY_PATH``
should be correctly defined. See the `EPICS Application Developer's
Guide
<http://www.aps.anl.gov/epics/base/R3-14/11-docs/AppDevGuide.pdf>`_ 
for details.

After changing the files in *configure*, run GNU make.

Note that make builds first in the *configure* directory, then the
*src* tree, and finally the *test* tree. A failure in the *test* tree
will not impact your ability to write sequences (but is still a bug and
should be reported, see `Report Bugs`_).

.. _Verifyingtheinstallation:

Test
----

Under Linux and Solaris, the *-R* loader option will have been used to
link executables, so ``LD_LIBRARY_PATH`` should need no further
additions. Under other operating systems, it may be necessary to append
``$SEQ/lib/$EPICS_HOST_ARCH``.

Change directory to test/demo and do::

   ../../bin/$EPICS_HOST_ARCH/demo stcmd.host

to rune the demo program. This includes its own CA server, so no IOC or
portable CA server is needed. The output should look something like
this::

   ben@sarun[1]: .../test/demo > ../../bin/linux-x86/demo stcmd.host 
   dbLoadDatabase "../../dbd/demo.dbd"
   demo_registerRecordDeviceDriver(pdbbase)
   dbLoadRecords "demo.db"
   iocInit
   Starting iocInit
   ############################################################################
   ###  EPICS IOC CORE built on Nov 17 2009
   ###  EPICS R3.14.8.2 $R3-14-8-2$ $2006/01/06 15:55:13$
   ############################################################################
   iocInit: All initialization complete
   seq &demo
   SEQ Version 2.0.12: Thu May 13 22:53:48 2010
   Spawning state program "demo", thread 0x8078348: "demo"
   epics> demo_1 2010/05/13 23:17:15: start -> ramp_up
   Spawning thread 0x8096660: "demo_1"
   Spawning thread 0x809f330: "demo_2"
   demo 2010/05/13 23:17:20: light_off -> light_on
   demo_1 2010/05/13 23:17:25: ramp_up -> ramp_down
   demo 2010/05/13 23:17:30: light_on -> light_off
   demo_1 2010/05/13 23:17:35: ramp_down -> ramp_up
   demo 2010/05/13 23:17:40: light_off -> light_on
   demo_1 2010/05/13 23:17:45: ramp_up -> ramp_down
   demo 2010/05/13 23:17:51: light_on -> light_off
   demo_1 2010/05/13 23:17:55: ramp_down -> ramp_up
   ...

If you see the "start -> ramp_up" etc. messages, things are
good. From another shell, do the following::

  > caget ss0
  ss0 light
  > caget ss1
  ss1 ramp

This illustrates the very basic "sequencer device support" that was
added in release 2.0. These records are returning the names of the
first two state-sets of the demo program.

Most (maybe all) of the other test programs do not connect to process
variables and can be run without an IOC. For example::

   ben@sarun[1]: .../bin/linux-x86 > ./sncExitOptx -s
   SEQ Version 2.0.12: Thu May 13 22:53:48 2010
   Spawning state program "sncexitoptx", thread 0x804ecf0: "sncexitoptx"
   epics> low, delay timeout, incr v and now reenter low
   v = 1
   Pause on each exit of low, including 'iterations'
   low, delay timeout, incr v and now reenter low
   v = 2
   Pause on each exit of low, including 'iterations'
   low, delay timeout, incr v and now reenter low
   v = 3
   Pause on each exit of low, including 'iterations'
   ...etc...

Note the *-s* argument to the test program. Without it, the program
will not start an iocShell and you will have difficulty terminating the
program (in fact, you have to ``kill -9`` it). Similar for the other
test programs.

.. _using-the-installation:

Use
---

To use the sequencer in an EPICS application, change the definition of
``SNCSEQ`` in *configure/RELEASE* (that is, the one in your
application, not the sequencer's) to contain the path to your
sequencer installation.

As soon as ``SNCSEQ`` is defined, the EPICS build system automagically
includes the build rules defined in the sequencer. To add an SNL
program to your application, write something like

::

   SRCS += xyz.st
   abc_LIBS += seq pv

into your Makefile. Here, *xyz.st* is the name of your SNL program, and
*abc* is the name of the library or binary to produce. Note that *.st*
files are run through the C preprocessor (*cpp*) before giving them to
the SNL compiler. Use the extension *.stt* to avoid this. For details,
see Chapter 4 of the `EPICS Application Developer's Guide
<http://www.aps.anl.gov/epics/base/R3-14/11-docs/AppDevGuide.pdf>`_.

A complete example application that also uses the sequencer can be
produced using makeBaseApp, e.g.

::

   makeBaseApp.pl -t example ex

Take a look at *exApp/src*, especially the *Makefile*.

Report Bugs
-----------

Please send bug reports to to tech-talk@aps.anl.gov or the maintainer
(currently this is `me <benjamin.franksen@bessy.de>`_). It helps
if you include which release of the sequencer and EPICS base release
you are using.

Contribute
----------

I am always happy to receive patches (bug fixes, improvements,
whatever). You can create a local copy of the `darcs`_
repository by saying::

   darcs get http://www-csr.bessy.de/control/SoftDist/sequencer/repo/

Assuming you have made some changes, first update your repository to
include the latest changes from upstream (with darcs this is not
strictly necessary, but good practice as it avoids conflicts)::

   darcs pull

(darcs will ask you for each patch that is not yet in your repo). Then
record your changes (if you haven't already)::

   darcs record

(darcs will prompt you for every single change you made and then prompt
you for giving the patch a name). Finally say::

   darcs send

Please respect the coding style when making changes. This includes
indentation (tabs or spaces, how many) and all the other little things
on which programmers like to differ ;-) like placement of braces etc.
Note that for historical reasons the style differs somewhat between
subdirectories. It is much easier for me to review patches if they do
not contain gratuitous changes or combine several unrelated changes in
a single patch.

Also, please take care that your patch does not accidentally contain
site-specific changes (typically done in configure). For my own work, I
usually record such changes with a description that contains 'DONT SEND
THIS' or something similar.

.. _darcs: http://darcs.net/
