Introduction
============

About
-----

.. include:: about.inc

Acknowledgements
----------------

This software was originally developed by Andy Kozubal at Los Alamos
National Laboratory (LANL). It was subsequently modified by William
Lupton, formerly at  the W. M. Keck Observatory (Keck), with
contributions by Greg White of the Stanford Linear Accelerator Center
National Accelerator Laboratory (SLAC-NAL).

Eric Norum, Janet Anderson, and Marty Kraimer (APS) made the initial
port to EPICS 3.14 that led to the 2.0.x series. Eric Norum and Andrew
Johnson (APS) provided lots of patches up to release 2.0.12.

Copyright
---------

This software was produced under U.S. Government contract at Los Alamos
National Laboratory and at Argonne National Laboratory. The EPICS
software is copyright by the Regents of the University of California
and the University of Chicago.

The original version of this documentation contained the following
sentence: "This document may be reproduced and distributed without
restrictions, provided it is reproduced in its entirety, including the
cover page." The reader may judge for himself how to fill this with
sense, considering that in the meantime the documentation has been
converted to reStructuredText, largely rewritten, restructured, and
automatically processed to generate web pages.

Since Ben Franksen, employed by the Helmholtz-Zentrum Berlin f.
Materialien und Energie (HZB) made significant changes to the software
and documentation, the copyright is extended accordingly. This is
the standard disclaimer:

  This software is copyrighted by the HELMHOLTZ-ZENTRUM BERLIN FUER
  MATERIALIEN UND ENERGIE G.M.B.H., BERLIN, GERMANY (HZB).
  The following terms apply to all files associated with the
  software.

  HZB hereby grants permission to use, copy, and modify this
  software and its documentation for non-commercial educational or
  research purposes, provided that existing copyright notices are
  retained in all copies.

  The receiver of the software provides HZB with all enhancements,
  including complete translations, made by the receiver.

  IN NO EVENT SHALL HZB BE LIABLE TO ANY PARTY FOR DIRECT,
  INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
  OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
  DERIVATIVES THEREOF, EVEN IF HZB HAS BEEN ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.

  HZB SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
  A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE IS
  PROVIDED ON AN "AS IS" BASIS, AND HZB HAS NO OBLIGATION TO
  PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
  MODIFICATIONS.

Note on Versions
----------------

This text is supposed to describe version 2.1. Version 2.1 adds
support for local definitions (including variable declarations) at
all levels, a significantly improved compiler that employs new
lexer and parser generators, and lots of bugfixes. See `Notes on
Release 2.1`_ for details.

Version 2.0 differs from version 1.9 mainly in that sequencer
run-time code can run under any operating system for which an EPICS
OSI (Operating System Independent) layer is available, and message
systems other than channel access can be used. It depends on
libraries which are available only with EPICS R3.14.

An interim version 1.9.4 was made available to the EPICS community;
all new developments apart from major bug fixes will be based on
version 2.0.

Version 1.9 was written by Andy Kozubal, the original author of this
software. This version of the manual describes version 2.0, for
which the changes have been implemented by William Lupton of W. M.
Keck Observatory and Greg White of Stanford Linear Accelerator
Center (SLAC).

Versioning Policy
^^^^^^^^^^^^^^^^^

Starting with 2.0.0, the third digit is the patch level and will
be incremented each time a new version is released, no matter how
minor the changes. The second digit is the minor version number and
will be incremented each time functional changes are made. The
first digit is the major version number and will be incremented
only when major changes are made.

.. _Release_Notes_2.1:

Notes on Release 2.1
--------------------

Most of the changes relative to 2.0.12 are to the SNL compiler, but a
small number of changes have been made to the runtime library as well.

The extensions are mostly conservative: existing SNL programs should
compile and work just as with 2.0.12 (with one exception, see next
paragraph). This is not easy to guarantee, however, as there are many
corner cases where the manual is imprecise and the code was convoluted
(and possibly erroneous), especially with regard to the ``syncQ``
feature.

There is one (mis-)feature I have removed: 2.0.x  allowed more than one
entry or exit block inside the same state. This has no semantic value,
the action statements are simply concatenated as if they had been
written in one block. So if you (for whatever reason) relied on this,
then for each state you'll have to merge all its entry blocks into one
(and similar for its exit blocks).

For 2.1, the documentation has been converted to reStructuredText. We
use Sphinx (http://sphinx.pocoo.org/) to generate web pages from the
rst source files. What Sphinx does to a hand full of drab (almost)
plain text files is simply phantastic. Thanks and Kudos to the creators
of Sphinx!

New Features
^^^^^^^^^^^^

The most important extensions are local definitions and the new state
change command. Suggestions, criticism, or encouragements regarding
these extensions are welcome, of course. (Send them to
tech-talk@aps.anl.gov, core-talk@aps.anl.gov, or
benjamin.franksen@bessy.de).

Local Definitions
~~~~~~~~~~~~~~~~~

Here, "definitions" is to be understood as in the :ref:`SNL reference
<Definitions>`, i.e. ``option``s, variable declarations, ``assign``,
``monitor``, ``sync``, and ``syncQ`` constructs. These definitions have
to appear (in any order) right after the opening brace and before any
other content (code, states,transitions), similar as in C. However, not
every definition is allowed everywhere:

- ``option`` definitions are restricted just as before, i.e. at the top
  level (for program options) and inside a state (for state options)
- ``assign``, ``monitor``, ``sync``, and ``syncQ`` can appear inside a
  state set (``ss <state_set_name> {...}``) and inside a state (``state
  <state_name> {...}``), in addition to the top level
- foreign declarations (see below) and event flag declarations are
  restricted to the top-level
- variable declarations can appear at the start of any block (state
  set, state, transition, entry, exit, and compound statement blocks);
  their scope is always limited (statically) to the smallest enclosing
  block

Local variable declarations come in two flavours, depending on where
they appear:

#. Variables of *unlimited life time* are global variables and those
   which are local to a state set or a state clause. Only variables of
   this sort can be assigned to a process variable, monitored, synced
   etc.
#. Variables declared in any other block have lifetime *limited to the
   enclosing block*, they disappear when the block exits, just as block
   local variables in C.

Variable declarations are restricted to the small set of types offered
by SNL just as before. Scalar variable declarations may be initialized
with an arbitrary expression (for top-level variables the C compiler
will only allow constant expressions, but this isn't checked by the SNL
compiler).

State Change Command
~~~~~~~~~~~~~~~~~~~~

This is an experimental feature. It adds a new primitive action
statement

::

    state <state-name>;

Its operational meaning is to immediately return from the enclosing
transition action block and to enter the named state, instead of the
default state that is given after the block as before. Entry and exit
blocks are respected exactly as with all other state changes.

I have termed this an experimental feature because I am not sure it is
good to offer something like that. It is certainly similar to a "goto",
in that it enables unstructured control flow. I am interested in your
opinion!

Minor Extensions/Improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- You can avoid the usual 'warning: variable xxx used but not defined'
  by declaring foreign (i.e. C) variables, using a *foreign
  declaration statement*. The syntax is simple::

    declare xxx;

  declares that ``xxx`` is defined somewhere outside the control of the
  SNL compiler. Foreign declarations may appear only at the top-level
  scope.
- Fixed the generated line markers, so that error and warning messages
  now correctly point to the source location (this was seriously
  broken in the old version).
- The syntax now accepts a larger subset of C. For instance,
  "character" literals are now recognized, as well as the
  ``continue`` statement.

Download
^^^^^^^^

The project has been moved to

   http://www-csr.bessy.de/control/SoftDist/sequencer/

Releases can be downloaded from

   http://www-csr.bessy.de/control/SoftDist/sequencer/releases/

A darcs repository containing the latest changes is located at

   http://www-csr.bessy.de/control/SoftDist/sequencer/repo/

Build and Install
^^^^^^^^^^^^^^^^^

Apart from EPICS base (and its dependencies, e.g. Perl), building this
version of seq requires an additional tool named re2c to be installed.
This can be downloaded from http://sourceforge.net/projects/re2c/files/
(sources and Windows binaries), the home page is http://re2c.org/. If
you are on a linux system, you will probably want to use the re2c
package your distribution provides.

Internals
^^^^^^^^^

The compiler is not a re-write from scratch, but changes are numerous
and pervasive.

The ancient versions of yacc and lexx that are bundled with EPICS base
(in a modified version and thus never upgraded) are no longer used.
Since lex/yacc suffers from severe backward compatibility disease
(witness all the traditional-C stuff they still carry around, global
vars and everything), I decided to look for something better. Shying
away from more radical steps (for instance, it would have been much,
much easier to re-implement the whole compiler in Haskell) because of
all the usual issues involved (portability, nobody else would
understand the code, etc, etc), I chose a more conservative approch:
the new snc version uses re2c as the lexer generator, and lemon as the
parser generator. Re2c is available for many platforms (including
Windows), whereas lemon consists of just one source file (plus one
template file) and so can be easily bundled with the sequencer. Both
tools generate very fast code (reportedly better than lex/yacc).

Other internal changes include:

* use standard ANSI C
* clean separation between compiler stages: lexing, parsing, analysis,
  code generation
* no global variables, very few static ones
* unified error, warning, and debug reporting
* improved type safety by using unions instead of casts
  (plus a number of supporting macros) e.g. for the various syntactic
  constructs; added many new struct types
* use a hash table (the gpHash from libCom) for name lookup instead of
  doing linear search all over the place
* complete re-implementation of lexing and parsing (using re2c and
  lemon); the new parser spec has only three parsing conflicts and
  these are unavoidable: one is the well-known if-else ambiguity, the
  remaining two are due to escaped C code, where the parser cannot
  decide whether it is a declaration or a statement (the old version
  had a total of 744 conflicts)
* generated code contains fewer '#define's making accidental name
  clashes less probable
* the interface between the sequencer library and the generated code
  is now more type safe (no more XXX_FUNC casts, SS_ID and USER_VAR
  became anonymous struct types)
* in order to implement the state change command, an additional
  argument is needed for the action callback


Notes on Releases 2.0.0 to 2.0.12
---------------------------------

.. _Release_Notes_2.0.12:

Release 2.0.12
^^^^^^^^^^^^^^

-  Directory dependencies to permit building with the parallel make
   option -j.

-  Library dependencies changes to match EPICS Base R3.14.10.

-  Added the routine seqcaStats to src/seq/seq_qry.c.

-  Cleaned up compiler warnings in src/snc.


.. _Release_Notes_2.0.11:

Release 2.0.11
^^^^^^^^^^^^^^

-  A bugfix in src/seq/seq_ca.c found by Stephanie Allison and Till
   Straumann.

-  Moved the PV build configuration variables from configure/RELEASE to
   the new CONFIG_SITE file, and moved CONFIG_APP functionality into
   CONFIG. Also set CHECK_RELEASE to YES by default in
   configure/Makefile.

.. _Release_Notes_2.0.10:

Release 2.0.10
^^^^^^^^^^^^^^

-  Release 2.0.10 contains the new diagnostic seqcar(verbosity). This
   produces report about all the channel access connections from sequence
   programs.

.. _Release_Notes_2.0.9:

Release 2.0.9
^^^^^^^^^^^^^

-  seq_connect now initializes assignCount and numMonitoredChans BEFORE
   connecting to the PVs. With the previous versions it was possible to
   signal that everything was connected and the first monitor received
   before it actually happened.


.. _Release_Notes_2.0.8:

Release 2.0.8
^^^^^^^^^^^^^

-  seq_main.c was casting a pointer to an int. On some architectures
   this caused a warning message.

-  Support for cygwin32 om windows was added.

-  test/pv/ was still still using osiThread.h. This is replaced bt
   epicsThread.

-  test/simple and test/validate now use EPICS_BASE_IOC_LIBS instead of
   EPICS_BASE_HOST_LIBS.


.. _Release_Notes_2.0.7:

Release 2.0.7
^^^^^^^^^^^^^

-  A sequence program could wait up to 20 seconds before all PVs
   connect and the first monitor occurs for each monitored PV. This
   could happen even if all PVs are local. This is now fixed.


.. _Release_Notes_2.0.6:

Release 2.0.6
^^^^^^^^^^^^^

-  When looking to see if all PVs have connected it now looks for first
   monitor coming back as well as all PVs connecting. This prevents the
   chance of using the value of a PV before it is given a value.


.. _Release_Notes_2.0.5:

Release 2.0.5
^^^^^^^^^^^^^

-  Replaced the C++ static constructor used for command registration
   with a generated registrar routine that must be listed in an IOC's
   xxxInclude.dbd file for use on on non-vxWorks systems.  This
   approach permits sequence programs to be placed in an external
   support library and pulled in automatically by adding the
   registrar() statement in the xxxInclude.dbd and linking the IOC
   application against that library.  For a sequence program that
   starts::

       program demo ...

   the dbd file should contain the statement::

       registrar(demoRegistrar)

   This is only required for applications that use the iocshell,
   vxWorks IOCs will work as before.

-  Modifications to the demo/test programs needed to run these under
   Base R3.14.3.

-  The config directory has been removed.

-  Replaced devSequencer.c with version supplied by Kukhee Kim, SLAC


.. _Release_Notes_2.0.4:

Release 2.0.4
^^^^^^^^^^^^^

Changes have been made to follow the R3.14.2 build rules.
Generate an example application to see how to build sequencer applications.
Note that this version requires R3.14.2 of base.


.. _Release_Notes_2.0.1:

Release 2.0.1
^^^^^^^^^^^^^

Eric Norum, Janet Anderson, and I [Marty Kraimer] spent some time
making the sequencer work with EPICS release 3.14.0alpha2. We are NOT
responsible for the sequencer. Release 2.0.1 should be considered an
interim release until Greg White and Ron Chestnut have time to become
familiar with the changes we made.

We did not update the SNL/SEQ manual. The following briefly describes
documentation changes needed for the 2.0.0 reference manual.

-  New Compiler Options

   *  +i Code will be generated to automatically register sequence
      functions and state programs. This is the default

   *  -i Do not generate registration code. Only useful on vxWorks to
      save a small amount of memory.

-  Compiling and linking a state program under Unix.

-  The exampleApp supplied with base demonstrates how to build sequence
   programs that work with epics databases. It also shows how to build
   a sequence program that runs without databases.

-  test/simple also shows how to build a sequence program that runs 
   without databases running in the same process.

-  The main program generated by the +m compiler options looks like::

      int main(int argc,char *argv[]) {
          char * macro_def;
          epicsThreadId threadId;
          int callIocsh = 0;
          if(argc>1 && strcmp(argv[1],"-s")==0) {
              callIocsh=1;
              --argc; ++argv;
          }
          macro_def = (argc>1)?argv[1]:NULL;
          threadId = seq((void *)&snctest, macro_def, 0);
          if(callIocsh) {
              iocsh(0);
          } else {
              epicsThreadExitMain();
          }
          return(0);
      }

   Such a program is invoked via the call like::

      <name> -s "xxx=xxx,..."

   If the -s option is specified iocsh is started. This allows the user
   to issue sequence commands like seqShow. If the -s option is not
   given, the shell is not started. If a program is started as a
   background process the -s option should not be specified.

   The other option argument is macro substitutions.

Comments about changes made for release 2.0.1

-  I think config should be removed. Just require 3.14 and later.

-  in test/simple and test/validate::

     assign v to "grw:xxxExample";

   changed to

     assign v to "{user}:xxxExample";

-  in src/dev:
   *  dev.c renamed to devSequencer.c
   *  seq.dbd renamed to devSequencer.dbd

-  in src/snc
   *  The generated main program is different. See below
   *  New option -i. See above
   *  Made many changes to get rid of warning messages.

-  in src/seq
   *  seq now returns an epicsThreadId
   *  all addesses now printed with %p
   *  several epicsPrintf replaced with printf.
   *  Got rid of simple shell supplied by seq. No longer needed.

-  in src/pv

   *  Only LIBRARY = pv is generated. It includes the stuff
      that was in pvKtl, pvCa, and pvFile if they are requested.
   *  This was done because the old way caused a circircular dependency
      that is not accepted by windows.


.. _Release_Notes_2.0:

Notes on Release 2.0
--------------------

Version 2.0 of the sequencer and state notation compiler is
available for EPICS release R3.14 and later. We have added several
enhancements to the language and to the run-time sequencer. State
programs must be compiled under the new state notation compiler to
execute properly with the new sequencer. However, under most
circumstances no source-level changes to existing programs are
required.

Portability changes
^^^^^^^^^^^^^^^^^^^

These changes allow state programs to run unchanged on hosts and
IOCs.

Replaced VxWorks dependencies with OSI routines
   All VxWorks routines have been replaced with the appropriate OSI
   (Operating System Independent) routines. State programs can run in
   any environment for which there is an OSI implementation.

Unused (and undocumented) ``VX_OPT`` option has been removed.

Replaced direct channel access calls with new PV API
   All CA calls have been replaced with equivalent calls to a new PV
   (process variable) API which can be layered on top of not just CA
   but also other message systems. See :doc:`PV-API`.

Added optional generation of main program
   The new :option:`+m` (main) option generates a C main program whose
   single argument is a list of macro assignments.

   When this option is enabled, the main thread reads from standard
   input and can execute ``seqShow``, ``seqChanShow`` etc. on demand.
   End of file causes the sequencer to exit.

New Language Features
^^^^^^^^^^^^^^^^^^^^^

Entry handler
   A one-off ``entry`` handler can be supplied (c.f. the
   existing ``exit`` handler). This is called once, at sequencer
   start-up, in the context of the first state set, before the
   remaining state set threads have been created. See
   :ref:`GlobalEntryExit`.

Entry and exit actions
   The ``entry`` block of a state is executed each time the state is
   entered; the ``exit`` block is executed each time the state is left.
   Note that these blocks are aassociated with a state and are not the
   same as the one-off entry and exit handlers. See
   :ref:`StateEntryExit`.

State options
   :option:`-t`, :option:`-e` and :option:`-x` are now recognized
   options within the scope of a state. :option:`-t` inhibits the
   "timer reset" on re-entry to a state from itself; :option:`-e` (for
   "entry") is used with the new ``entry`` block, and forces the
   ``entry`` statements to be executed on all entries to a state, even
   if from the same state; :option:`-x` (for "exit") is complementary
   to :option:`-e`, but for the new ``exit`` block. See
   :ref:`StateOption`.

Queueable monitors
   Monitor messages can be queued and then dequeued at leisure. This
   means that monitor messages are not lost, even when posted rapidly
   in succession. This feature is supported by new ``syncQ``,
   ``pvGetQ`` and ``pvFreeQ`` language elements, and a new
   ``seqQueueShow`` routine. When SNL arrays are used, a single queue
   is shared by the control system variables associated with the
   elements of the array, which can be useful for parallel control. See
   :ref:`QueuingMonitors` and :ref:`syncq_stmt`.

.. _Device support:

Device support
   An device support module has been added. This allows EPICS records
   to refererence sequencer internals. At present this is very basic
   and can only return state-set names. See
   :ref:`Verifyingtheinstallation` for a well-hidden example (look for
   ``caget ss0``).

.. _Local variables:

Local variables
   SNL does not support the declaration of local variables. However,
   the C code generated for a ``when`` clause is now placed within an
   extra level of braces and the C escape mechanism can be used to
   declare a local variable. See :ref:`Variable Scope`.

More functions are safe in action code
   In previous versions, some functions, e.g. ``pvPut``, have acquired
   a resource lock and others, e.g. ``efTestAndClear``, have not. Those
   that didn't were intended for use in action code and those that did
   not were intended for use in ``when`` clauses. This was confusing
   and dangerous. All such functions now acquire a mutex (that can be
   taken recursively).

Asynchronous puts
   ``pvPut`` can now put process variables asynchronously by using an
   extra ``ASYNC`` argument. Completion can be tested using the new
   ``pvPutComplete``. Arrays are supported (so ``pvPutComplete`` can be
   used to test whether a set of puts has completed). See
   :ref:`AsynchronousUseofpvPut` and :ref:`pvPutComplete`.

Synchronous/asynchronous override on gets and puts
   ``pvGet`` and ``pvPut`` both accept an optional ``SYNC`` or
   ``ASYNC`` argument that, for ``pvGet``, overrides the default as set
   using the :option:`-a` option and, for ``pvPut``, overrides the
   default synchronous behavior. See :ref:`pvPut` and :ref:`pvGet`.

Sequencer deletion re-written
   Sequencer deletion has been completely re-written. You can no longer
   delete a sequencer by deleting one of its tasks. Instead you must
   use the new ``seqStop`` routine. See
   :ref:`StoppingtheStateProgramTasks`.

efClear can wake up state sets
   Clearing an event flag can now wake up state sets that reference
   the event flag in ``when`` tests.

More C syntax is supported
   The ``to`` in ``assign``, ``sync`` and ``syncQ`` statements is now
   optional.

   Compound expressions such as ``i=1,j=2`` (often used in ``for``
   loops) are now permitted.

   Variables can now be initialized in declarations such as ``int
   i=2;``.

   Pre-processor lines are now permitted between state sets and states
   (relaxes restrictions on using ``#include`` to include code).

   ``~`` (complement) and ``^`` (exclusive or) operators are permitted.

   ANSI string concatenation, e.g. ``"xxx" "yyy"`` is the same as
   ``"xxxyyy"``, is supported.

   Full exponential representation is supported for numbers
   (previously couldn't use ``E`` format).

Bugs fixed
^^^^^^^^^^

Avoidance of segmentation violations
   SEGV no longer occurs if an undeclared variable or event flag is
   referenced

   SEGV no longer occurs if the last bit of an event mask is used

   SEGV no longer occurs when doing ``seqShow`` and there was no
   previous state

   Miscellaneous other problems found by purify were fixed.

Avoidance of race condition which prevented monitors from being enabled
   If a connection handler was called before ``seq_pvMonitor``, a race
   condition meant that the ``ca_add_array_event`` routine might
   never get called.

Miscellaneous
^^^^^^^^^^^^^

Compilation warnings have been avoided wherever possible.

A 60Hz system clock frequency is no longer assumed.

Error reporting is now more consistent; it is currently just using
``errlogPrintf``.

The new EPICS R3.14 *configure*-based make rules are used.

Future Plans
^^^^^^^^^^^^

Several items remain unsupported or only partially supported. Users
are encouraged to provide feedback on this list or on other desired
items.

Device support
   This is partially supported. See `Device support`_.

Local variables
   These are partially supported. See `Local variables`_.

pvNew dynamic loading
   This would remove some undesirable library dependencies. See
   :ref:`pvApiOverview`.

Hierarchical states
   This would be a major enhancement and would, incidentally, bring
   the sequencer model into very close agreement with the Harel model
   that is espoused by the UML. Events would be propagated up the
   state hierarchy.

.. _Release_Notes_1.9:

Notes on Release 1.9
--------------------

With version 1.9, we have incorporated many extensions to
the state notation language. Some of these changes offer
significant advantages for programs and systems with a large number
of control system variables.

Number of control system variables
   The previous restriction on the number of control system variables
   that could be defined no longer applies. Only the amount of memory
   on the target processor limits the number of variables.

Array assignments
   Individual elements of an array may be assigned to control system
   variables. This feature simplifies many codes that contain groups
   of similar variables. Furthermore, double-subscripted arrays allow
   arrays of array-valued variables.

Dynamic assignments
   Control system variables may now be dynamically assigned or
   re-assigned within the language at run time.

Hex constants
   Hexadecimal numbers are now permitted within the language syntax.
   Previously, these had to be defined in escaped C code.

Time stamp
   The programmer now has access to the time stamp associated with a
   control system variable.

Pointers
   Variables may now be declared as pointers.

seqShow
   We enhanced the ``seqShow`` command to present more relevant
   information about the running state programs.

seqChanShow
   The ``seqChanShow`` command now allows specification of a search
   string on the variable name, permits forward and backward stepping
   or skipping through the variable list, and optionally displays only
   variables that are or are not connected.

   The syntax for displaying only variables that are not connected is
   ``seqChanShow "<seq_program_name>", "-"``

ANSI prototypes
   SNC include files now use ANSI prototypes for all functions. To the
   programmer this means that an ANSI compiler must be used to compile
   the intermediate C code.

Fix for task deletion
   Version 1.8 of the sequencer didn't handle the task deletion
   properly if a task tried to delete itself. We corrected this in
   version 1.9.
